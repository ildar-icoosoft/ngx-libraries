{
    "pipes": [
        {
            "name": "ValidationMessagePipe",
            "id": "pipe-ValidationMessagePipe-8b2e3af18bf96c772d229ac848a2dfaa",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/pipes/validation-message.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "errorKey",
                            "type": "string"
                        },
                        {
                            "name": "errorData",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "errorKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "validationMessage",
            "sourceCode": "import {Inject, Pipe, PipeTransform} from '@angular/core';\nimport {INgxFormModuleConfig} from '../interfaces/ngx-form-module-config';\nimport {NGX_FORM_MODULE_CONFIG} from '../constants/ngx-form-module-config';\nimport {prepareValidationMessage} from '../utils/error';\n\n@Pipe({\n  name: 'validationMessage'\n})\nexport class ValidationMessagePipe implements PipeTransform {\n\n  constructor(@Inject(NGX_FORM_MODULE_CONFIG) private config: INgxFormModuleConfig) {}\n\n  transform(errorKey: string, errorData: any): string {\n    if (errorKey === 'custom') {\n      return prepareValidationMessage(errorData);\n    }\n    if (errorKey === 'customArr') {\n      return errorData.map(item => prepareValidationMessage(item)).join(', ');\n    }\n\n    if (this.config.errorMessages[errorKey]) {\n      let messageTemplate = this.config.errorMessages[errorKey];\n\n      if (typeof errorData === 'object') {\n        for (const key in errorData) {\n          if (errorData.hasOwnProperty(key)) {\n            messageTemplate = messageTemplate.replace(\n              '{' + key + '}',\n              errorData[key]\n            );\n          }\n        }\n      }\n\n      return messageTemplate;\n    }\n\n    return `[${errorKey}]`;\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "IFormError",
            "id": "interface-IFormError-6b06a4bf6be01b90afd0f595ab9917ba",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/form-error.ts",
            "type": "interface",
            "sourceCode": "export interface IFormError {\r\n  formControlName?: string;\r\n  code?: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "formControlName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "INgxFormModuleConfig",
            "id": "interface-INgxFormModuleConfig-b8441434c80d7de14bc7ec7eed876246",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/ngx-form-module-config.ts",
            "type": "interface",
            "sourceCode": "import {ValidatorFn} from '@angular/forms';\r\n\r\nexport interface INgxFormModuleConfig {\r\n  validators?: {\r\n    [key: string]: INgxFormValidatorConfig\r\n  };\r\n  errorMessages?: {\r\n    [key: string]: string\r\n  };\r\n}\r\n\r\nexport interface INgxFormValidatorConfig {\r\n  isGroupValidator?: boolean;\r\n  validator: (...args: any[]) => ValidatorFn;\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessages",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "validators",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "INgxFormValidatorConfig",
            "id": "interface-INgxFormValidatorConfig-b8441434c80d7de14bc7ec7eed876246",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/ngx-form-module-config.ts",
            "type": "interface",
            "sourceCode": "import {ValidatorFn} from '@angular/forms';\r\n\r\nexport interface INgxFormModuleConfig {\r\n  validators?: {\r\n    [key: string]: INgxFormValidatorConfig\r\n  };\r\n  errorMessages?: {\r\n    [key: string]: string\r\n  };\r\n}\r\n\r\nexport interface INgxFormValidatorConfig {\r\n  isGroupValidator?: boolean;\r\n  validator: (...args: any[]) => ValidatorFn;\r\n}\r\n",
            "properties": [
                {
                    "name": "isGroupValidator",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "validator",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "NgxFormService",
            "id": "injectable-NgxFormService-e8b6eef7d3848c5def56f30b7f896473",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/ngx-form.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxFormService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-44f2f1e1b3a1e0ebc1e0edafd90d05c0",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "FormValidationErrorsComponent",
            "id": "component-FormValidationErrorsComponent-7ef9ad249b23a67bf8a49bd78c32696d",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/form-validation-errors/form-validation-errors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ii-form-validation-errors",
            "styleUrls": [
                "./form-validation-errors.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form-validation-errors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "group",
                    "line": 12,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'ii-form-validation-errors',\n  templateUrl: './form-validation-errors.component.html',\n  styleUrls: ['./form-validation-errors.component.css']\n})\nexport class FormValidationErrorsComponent implements OnInit {\n\n  @Input()\n  group: FormGroup;\n\n  constructor() {}\n\n  ngOnInit() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-validation-errors.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-validation-errors\">\n  <ng-container *ngIf=\"group.errors\">\n    <div *ngFor=\"let error of group.errors | keyvalue\" class=\"alert alert-danger form-validation-errors__item\">{{error.key | validationMessage:error.value}}</div>\n  </ng-container>\n</div>\n\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c349aa42f2121da4b5737d60a50fa413",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "NgxFormComponent",
            "id": "component-NgxFormComponent-3ed3a2533be7e74dd17c5e9ceca380c5",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/ngx-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-ngx-form",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  ngx-form works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-ngx-form',\r\n  template: `\r\n    <p>\r\n      ngx-form works!\r\n    </p>\r\n  `,\r\n  styles: [\r\n  ]\r\n})\r\nexport class NgxFormComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-caf3f2fce2bf7356cf7ccd76b8a88482",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Learn Storybook\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          docs\r\n        </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ValidationControlComponent",
            "id": "component-ValidationControlComponent-cd2499b299120689d336eacd26752252",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/validation-control/validation-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ii-validation-control",
            "styleUrls": [
                "./validation-control.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./validation-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 11,
                    "type": "FormControl"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\n@Component({\n  selector: 'ii-validation-control',\n  templateUrl: './validation-control.component.html',\n  styleUrls: ['./validation-control.component.css']\n})\nexport class ValidationControlComponent {\n  @Input()\n  control: FormControl;\n\n  constructor() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./validation-control.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div class=\"validation-control\"\n     [class.has-error]=\"control.invalid && control.touched\">\n  <ng-content></ng-content>\n  <ng-container *ngIf=\"control.invalid && control.touched\">\n    <div *ngFor=\"let error of control.errors | keyvalue\" class=\"alert alert-danger validation-control__error\">{{error.key | validationMessage:error.value}}</div>\n  </ng-container>\n</div>\n\n"
        }
    ],
    "modules": [
        {
            "name": "NgxFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormValidationErrorsComponent"
                        },
                        {
                            "name": "NgxFormComponent"
                        },
                        {
                            "name": "ValidationControlComponent"
                        },
                        {
                            "name": "ValidationMessagePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormValidationErrorsComponent"
                        },
                        {
                            "name": "NgxFormComponent"
                        },
                        {
                            "name": "ValidationControlComponent"
                        },
                        {
                            "name": "ValidationMessagePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/ngx-form.module.ts",
                "type": "INgxFormModuleConfig",
                "defaultValue": "{\r\n  validators: {\r\n    required: {\r\n      isGroupValidator: false,\r\n      validator: () => {\r\n        return Validators.required;\r\n      }\r\n    },\r\n    email: {\r\n      isGroupValidator: false,\r\n      validator: () => {\r\n        return Validators.email;\r\n      }\r\n    },\r\n    passwordMatch: {\r\n      isGroupValidator: true,\r\n      validator: (fieldData) => {\r\n        const a = 'password';\r\n        const b = fieldData.name;\r\n\r\n        return validateEqual(a, b);\r\n      }\r\n    }\r\n  },\r\n  errorMessages: {\r\n    required: 'This field is required',\r\n    email: 'Wrong email format',\r\n    mismatch: 'Field values mismatch',\r\n    minLength: 'Field length is too short must be {requiredLength}, actual is {actualLength}',\r\n    maxLength: 'Field length is too long must be {requiredLength}, actual is {actualLength}',\r\n    age: 'The age under {requiredAge} is not accepted',\r\n    min: 'The minimum value for an input field is {min}',\r\n    max: 'The maximum value for an input field is {max}',\r\n  }\r\n}"
            },
            {
                "name": "handleChange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/0-NgxForm.stories.ts",
                "type": "",
                "defaultValue": "(data: any) => {\r\n  action('form-change');\r\n}"
            },
            {
                "name": "html",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/0-NgxForm.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  template: `<div>Hello</div>`,\r\n  props: {\r\n  },\r\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "markAllFormControlsAsTouched",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "",
                "defaultValue": "(formGroup: FormGroup): void => {\r\n  Object.keys(formGroup.controls).forEach(field => {\r\n    const control = formGroup.get(field);\r\n    if (control instanceof FormControl) {\r\n      control.markAsTouched({ onlySelf: true });\r\n    } else if (control instanceof FormGroup) {\r\n      markAllFormControlsAsTouched(control);\r\n    }\r\n  });\r\n}"
            },
            {
                "name": "NGX_FORM_MODULE_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/constants/ngx-form-module-config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<INgxFormModuleConfig>('NGX_FORM_MODULE_CONFIG')"
            },
            {
                "name": "prepareValidationMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "",
                "defaultValue": "(value: string): string => {\r\n  return value;\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "setFormErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "",
                "defaultValue": "(\r\n  formGroup: FormGroup,\r\n  formErrors: IFormError[]\r\n): void => {\r\n  const formGroupErrors: string[] = [];\r\n  const formControlErrors: Record<string, string[]> = {};\r\n\r\n  formErrors.forEach(item => {\r\n    const formControlName = item.formControlName;\r\n\r\n    if (!formControlName) {\r\n      return formGroupErrors.push(item.message);\r\n    }\r\n\r\n    const formControl = formGroup.get(formControlName);\r\n\r\n    if (formControl) {\r\n      if (!formControlErrors[formControlName]) {\r\n        formControlErrors[formControlName] = [];\r\n      }\r\n      formControlErrors[formControlName].push(item.message);\r\n    } else {\r\n      formGroupErrors.push(item.message);\r\n    }\r\n  });\r\n\r\n  if (formGroupErrors.length) {\r\n    formGroup.setErrors({\r\n      customArr: formGroupErrors\r\n    });\r\n  }\r\n\r\n  for (const formControlName in formControlErrors) {\r\n    const formControl = formGroup.get(formControlName);\r\n\r\n    formControl.setErrors({\r\n      customArr: formControlErrors[formControlName]\r\n    });\r\n  }\r\n\r\n  markAllFormControlsAsTouched(formGroup);\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  component: Header,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
            },
            {
                "name": "validateEqual",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/validators/index.ts",
                "type": "",
                "defaultValue": "(\r\n  a: FormControl | string,\r\n  b: FormControl | string\r\n) => {\r\n  return (group: FormGroup): { [s: string]: boolean } => {\r\n    const controlA = a instanceof FormControl ? a : group.root.get(a);\r\n    const controlB = b instanceof FormControl ? b : group.root.get(b);\r\n\r\n    const controlBErrors = controlB.errors;\r\n\r\n    if (controlA && controlB && controlA.value !== controlB.value) {\r\n      controlB.setErrors(\r\n        Object.assign({}, controlBErrors, {\r\n          mismatch: true\r\n        })\r\n      );\r\n    } else {\r\n      if (controlB.hasError('mismatch')) {\r\n        const newErrors = _omit(controlBErrors, 'mismatch');\r\n        controlB.setErrors(_isEmpty(newErrors) ? null : newErrors);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/ildar-icoosoft/ngx-form/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/ngx-form.module.ts": [
                {
                    "name": "defaultConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/ngx-form.module.ts",
                    "type": "INgxFormModuleConfig",
                    "defaultValue": "{\r\n  validators: {\r\n    required: {\r\n      isGroupValidator: false,\r\n      validator: () => {\r\n        return Validators.required;\r\n      }\r\n    },\r\n    email: {\r\n      isGroupValidator: false,\r\n      validator: () => {\r\n        return Validators.email;\r\n      }\r\n    },\r\n    passwordMatch: {\r\n      isGroupValidator: true,\r\n      validator: (fieldData) => {\r\n        const a = 'password';\r\n        const b = fieldData.name;\r\n\r\n        return validateEqual(a, b);\r\n      }\r\n    }\r\n  },\r\n  errorMessages: {\r\n    required: 'This field is required',\r\n    email: 'Wrong email format',\r\n    mismatch: 'Field values mismatch',\r\n    minLength: 'Field length is too short must be {requiredLength}, actual is {actualLength}',\r\n    maxLength: 'Field length is too long must be {requiredLength}, actual is {actualLength}',\r\n    age: 'The age under {requiredAge} is not accepted',\r\n    min: 'The minimum value for an input field is {min}',\r\n    max: 'The maximum value for an input field is {max}',\r\n  }\r\n}"
                }
            ],
            "stories/0-NgxForm.stories.ts": [
                {
                    "name": "handleChange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/0-NgxForm.stories.ts",
                    "type": "",
                    "defaultValue": "(data: any) => {\r\n  action('form-change');\r\n}"
                },
                {
                    "name": "html",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/0-NgxForm.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  template: `<div>Hello</div>`,\r\n  props: {\r\n  },\r\n})"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  component: Header,\r\n  props: args,\r\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts": [
                {
                    "name": "markAllFormControlsAsTouched",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                    "type": "",
                    "defaultValue": "(formGroup: FormGroup): void => {\r\n  Object.keys(formGroup.controls).forEach(field => {\r\n    const control = formGroup.get(field);\r\n    if (control instanceof FormControl) {\r\n      control.markAsTouched({ onlySelf: true });\r\n    } else if (control instanceof FormGroup) {\r\n      markAllFormControlsAsTouched(control);\r\n    }\r\n  });\r\n}"
                },
                {
                    "name": "prepareValidationMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                    "type": "",
                    "defaultValue": "(value: string): string => {\r\n  return value;\r\n}"
                },
                {
                    "name": "setFormErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                    "type": "",
                    "defaultValue": "(\r\n  formGroup: FormGroup,\r\n  formErrors: IFormError[]\r\n): void => {\r\n  const formGroupErrors: string[] = [];\r\n  const formControlErrors: Record<string, string[]> = {};\r\n\r\n  formErrors.forEach(item => {\r\n    const formControlName = item.formControlName;\r\n\r\n    if (!formControlName) {\r\n      return formGroupErrors.push(item.message);\r\n    }\r\n\r\n    const formControl = formGroup.get(formControlName);\r\n\r\n    if (formControl) {\r\n      if (!formControlErrors[formControlName]) {\r\n        formControlErrors[formControlName] = [];\r\n      }\r\n      formControlErrors[formControlName].push(item.message);\r\n    } else {\r\n      formGroupErrors.push(item.message);\r\n    }\r\n  });\r\n\r\n  if (formGroupErrors.length) {\r\n    formGroup.setErrors({\r\n      customArr: formGroupErrors\r\n    });\r\n  }\r\n\r\n  for (const formControlName in formControlErrors) {\r\n    const formControl = formGroup.get(formControlName);\r\n\r\n    formControl.setErrors({\r\n      customArr: formControlErrors[formControlName]\r\n    });\r\n  }\r\n\r\n  markAllFormControlsAsTouched(formGroup);\r\n}"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/constants/ngx-form-module-config.ts": [
                {
                    "name": "NGX_FORM_MODULE_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/constants/ngx-form-module-config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<INgxFormModuleConfig>('NGX_FORM_MODULE_CONFIG')"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/validators/index.ts": [
                {
                    "name": "validateEqual",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/validators/index.ts",
                    "type": "",
                    "defaultValue": "(\r\n  a: FormControl | string,\r\n  b: FormControl | string\r\n) => {\r\n  return (group: FormGroup): { [s: string]: boolean } => {\r\n    const controlA = a instanceof FormControl ? a : group.root.get(a);\r\n    const controlB = b instanceof FormControl ? b : group.root.get(b);\r\n\r\n    const controlBErrors = controlB.errors;\r\n\r\n    if (controlA && controlB && controlA.value !== controlB.value) {\r\n      controlB.setErrors(\r\n        Object.assign({}, controlBErrors, {\r\n          mismatch: true\r\n        })\r\n      );\r\n    } else {\r\n      if (controlB.hasError('mismatch')) {\r\n        const newErrors = _omit(controlBErrors, 'mismatch');\r\n        controlB.setErrors(_isEmpty(newErrors) ? null : newErrors);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/form-validation-errors/form-validation-errors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormValidationErrorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/validation-control/validation-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ValidationControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/constants/ngx-form-module-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NGX_FORM_MODULE_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/form-error.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/ngx-form-module-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INgxFormModuleConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/ngx-form-module-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INgxFormValidatorConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/ngx-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/ngx-form.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/ngx-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NgxFormService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/pipes/validation-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ValidationMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "markAllFormControlsAsTouched",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prepareValidationMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setFormErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/validators/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateEqual",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/0-NgxForm.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handleChange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/0-NgxForm.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "html",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}