{
    "pipes": [
        {
            "name": "SafePipe",
            "id": "pipe-SafePipe-875ba637293a32d40883a4634dba361e",
            "file": "projects/ildar-icoosoft/ngx-common/src/lib/pipes/safe.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safe",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport {\r\n  DomSanitizer,\r\n  SafeHtml,\r\n  SafeResourceUrl,\r\n  SafeScript,\r\n  SafeStyle,\r\n  SafeUrl\r\n} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safe'\r\n})\r\nexport class SafePipe implements PipeTransform {\r\n  constructor(protected sanitizer: DomSanitizer) {}\r\n\r\n  transform(\r\n    value: any,\r\n    type: string\r\n  ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\r\n    switch (type) {\r\n      case 'html':\r\n        return this.sanitizer.bypassSecurityTrustHtml(value);\r\n\r\n      case 'style':\r\n        return this.sanitizer.bypassSecurityTrustStyle(value);\r\n\r\n      case 'script':\r\n        return this.sanitizer.bypassSecurityTrustScript(value);\r\n\r\n      case 'url':\r\n        return this.sanitizer.bypassSecurityTrustUrl(value);\r\n\r\n      case 'resourceUrl':\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n\r\n      default:\r\n        throw new Error(`Invalid safe type specified: ${type}`);\r\n    }\r\n  }\r\n}\r\n"
        },
        {
            "name": "ValidationMessagePipe",
            "id": "pipe-ValidationMessagePipe-c2276aafdc92f33b77b2c79ea5acfc2f",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/pipes/validation-message.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "errorKey",
                            "type": "string"
                        },
                        {
                            "name": "errorData",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "errorKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "validationMessage",
            "sourceCode": "import {Inject, Pipe, PipeTransform} from '@angular/core';\r\nimport {prepareValidationMessage} from '../utils/error';\r\nimport {NGX_FORM_MODULE_CONFIG} from '../constants/ngx-form-module-config';\r\nimport {NgxFormModuleConfig} from '../interfaces/ngx-form-module-config';\r\n\r\n@Pipe({\r\n  name: 'validationMessage'\r\n})\r\nexport class ValidationMessagePipe implements PipeTransform {\r\n\r\n  constructor(@Inject(NGX_FORM_MODULE_CONFIG) private config: NgxFormModuleConfig) {}\r\n\r\n  transform(errorKey: string, errorData: any): string {\r\n    if (errorKey === 'custom') {\r\n      return prepareValidationMessage(errorData);\r\n    }\r\n    if (errorKey === 'customArr') {\r\n      return errorData.map(item => prepareValidationMessage(item)).join(', ');\r\n    }\r\n\r\n    if (this.config.errorMessages[errorKey]) {\r\n      let messageTemplate = this.config.errorMessages[errorKey];\r\n\r\n      if (typeof errorData === 'object') {\r\n        for (const key in errorData) {\r\n          if (errorData.hasOwnProperty(key)) {\r\n            messageTemplate = messageTemplate.replace(\r\n              '{' + key + '}',\r\n              errorData[key]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      return messageTemplate;\r\n    }\r\n\r\n    return `[${errorKey}]`;\r\n  }\r\n\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "ControlChangeData",
            "id": "interface-ControlChangeData-0d2e7e6f40e396ce1cdb5ce82625f6b6",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/control-change-data.ts",
            "type": "interface",
            "sourceCode": "import {FormControl} from '@angular/forms';\r\n\r\nexport interface ControlChangeData {\r\n  name: string;\r\n  formControl: FormControl;\r\n  value: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DynamicFieldData",
            "id": "interface-DynamicFieldData-ea68bb5f8c53f7b25fd9d83e7c118f5f",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-field-data.ts",
            "type": "interface",
            "sourceCode": "import {DynamicFieldDataOption} from './dynamic-field-data-option';\r\n\r\nexport interface DynamicFieldData {\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  options: DynamicFieldDataOption[];\r\n  items: DynamicFieldData[];\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "DynamicFieldData[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "options",
                    "type": "DynamicFieldDataOption[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DynamicFieldDataOption",
            "id": "interface-DynamicFieldDataOption-591cd78bd467c24c1c4044ce280d8748",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-field-data-option.ts",
            "type": "interface",
            "sourceCode": "export interface DynamicFieldDataOption {\r\n  name: string;\r\n  value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DynamicFormButton",
            "id": "interface-DynamicFormButton-75ec1e0736f3949a70e0e37c74b1eaa3",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-form-button.ts",
            "type": "interface",
            "sourceCode": "import {DynamicFormButtonClickEvent} from './dynamic-form-button-click-event';\r\n\r\nexport interface DynamicFormButton {\r\n  cssClass?: string;\r\n  cssContainerClass?: string;\r\n  color?: string;\r\n  label: string;\r\n  onClick(event: DynamicFormButtonClickEvent): void;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cssClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "cssContainerClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "DynamicFormButtonClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DynamicFormButtonClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "DynamicFormButtonClickEvent",
            "id": "interface-DynamicFormButtonClickEvent-9447724dca9e883e21c95ff0798a9991",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-form-button-click-event.ts",
            "type": "interface",
            "sourceCode": "import {DynamicFormComponent} from '../components/dynamic-form/dynamic-form.component';\r\n\r\nexport interface DynamicFormButtonClickEvent {\r\n  form: DynamicFormComponent;\r\n  nativeEvent: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "form",
                    "type": "DynamicFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "nativeEvent",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DynamicFormData",
            "id": "interface-DynamicFormData-5befb9887ec483461a047e3fa0c17f95",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-form-data.ts",
            "type": "interface",
            "sourceCode": "import {DynamicFieldData} from './dynamic-field-data';\r\n\r\nexport interface DynamicFormData {\r\n  items: DynamicFieldData[];\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "DynamicFieldData[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FormError",
            "id": "interface-FormError-51bc54cdb6729303418ddb0547df75d8",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/form-error.ts",
            "type": "interface",
            "sourceCode": "export interface FormError {\r\n  formControlName?: string;\r\n  code?: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "formControlName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FormSubmitData",
            "id": "interface-FormSubmitData-6c08b2801c218aff9fcb8f73f0a95023",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/form-submit-data.ts",
            "type": "interface",
            "sourceCode": "import {FormError} from './form-error';\r\n\r\nexport interface FormSubmitData {\r\n  values: Record<string, any>;\r\n  setSubmitting: (isSubmitting: boolean) => void;\r\n  setErrors: (errors: FormError[]) => void;\r\n}\r\n",
            "properties": [
                {
                    "name": "setErrors",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "setSubmitting",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "values",
                    "type": "Record<string | any>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NgxFormModuleConfig",
            "id": "interface-NgxFormModuleConfig-bd3e521d24d22466ca3b530435146178",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/ngx-form-module-config.ts",
            "type": "interface",
            "sourceCode": "import {DynamicFieldData} from './dynamic-field-data';\r\nimport {ControlValueAccessor, ValidatorFn} from '@angular/forms';\r\nimport {Type} from '@angular/core';\r\n\r\nexport interface NgxFormModuleConfig {\r\n  fields?: {\r\n    [key: string]: {\r\n      component: Type<ControlValueAccessor>,\r\n      needToShowLabelOutside?: boolean;\r\n      props?: {\r\n        [key: string]: any\r\n      },\r\n      mapConnectDataToProps?(connectData: DynamicFieldData): {\r\n        [key: string]: any\r\n      }\r\n    }\r\n  };\r\n  validators?: {\r\n    [key: string]: NgxFormValidatorConfig\r\n  };\r\n  errorMessages?: {\r\n    [key: string]: string\r\n  };\r\n}\r\n\r\nexport interface NgxFormValidatorConfig {\r\n  isGroupValidator?: boolean;\r\n  validator: (...args: any[]) => ValidatorFn\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessages",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fields",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "validators",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NgxFormValidatorConfig",
            "id": "interface-NgxFormValidatorConfig-bd3e521d24d22466ca3b530435146178",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/ngx-form-module-config.ts",
            "type": "interface",
            "sourceCode": "import {DynamicFieldData} from './dynamic-field-data';\r\nimport {ControlValueAccessor, ValidatorFn} from '@angular/forms';\r\nimport {Type} from '@angular/core';\r\n\r\nexport interface NgxFormModuleConfig {\r\n  fields?: {\r\n    [key: string]: {\r\n      component: Type<ControlValueAccessor>,\r\n      needToShowLabelOutside?: boolean;\r\n      props?: {\r\n        [key: string]: any\r\n      },\r\n      mapConnectDataToProps?(connectData: DynamicFieldData): {\r\n        [key: string]: any\r\n      }\r\n    }\r\n  };\r\n  validators?: {\r\n    [key: string]: NgxFormValidatorConfig\r\n  };\r\n  errorMessages?: {\r\n    [key: string]: string\r\n  };\r\n}\r\n\r\nexport interface NgxFormValidatorConfig {\r\n  isGroupValidator?: boolean;\r\n  validator: (...args: any[]) => ValidatorFn\r\n}\r\n",
            "properties": [
                {
                    "name": "isGroupValidator",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "validator",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-743db0875551a11a39744fd506291275",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/select-option.ts",
            "type": "interface",
            "sourceCode": "export interface SelectOption {\r\n  id: string;\r\n  value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [],
    "directives": [
        {
            "name": "DynamicFieldDirective",
            "id": "directive-DynamicFieldDirective-99354d7c41fc7d505896e955b2b508bc",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/directives/dynamic-field.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  forwardRef,\n  Inject,\n  Input,\n  OnInit,\n  ViewContainerRef\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DynamicFieldData} from '../interfaces/dynamic-field-data';\nimport {NGX_FORM_MODULE_CONFIG} from '../constants/ngx-form-module-config';\nimport {NgxFormModuleConfig} from '../interfaces/ngx-form-module-config';\n\n@Directive({\n  selector: '[iiDynamicField]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DynamicFieldDirective),\n      multi: true\n    }\n  ]\n})\nexport class DynamicFieldDirective implements OnInit, ControlValueAccessor {\n\n  @Input() fieldData: DynamicFieldData;\n  @Input() inputId: string;\n\n  component: ComponentRef<ControlValueAccessor>;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    @Inject(NGX_FORM_MODULE_CONFIG) private config: NgxFormModuleConfig\n  ) {\n  }\n\n  ngOnInit(): void {\n    const fieldData: DynamicFieldData = this.fieldData;\n\n    const itemConfig = this.config.fields[fieldData.type];\n\n    if (!itemConfig) {\n      const supportedTypes: string = Object.keys(this.config.fields).join(', ');\n      throw Error(\n        `Trying to use an unsupported type (${fieldData.type}).\n        Supported types: ${supportedTypes}`\n      );\n    }\n\n    const componentFactory: ComponentFactory<ControlValueAccessor> =\n      this.componentFactoryResolver.resolveComponentFactory(itemConfig.component);\n\n    this.component = this.viewContainerRef.createComponent(componentFactory);\n\n    const props: Record<string, any> = {};\n\n    if (this.inputId) {\n      props.inputId = this.inputId;\n    }\n\n    if (itemConfig.props) {\n      Object.assign(props, itemConfig.props);\n    }\n    if (itemConfig.mapConnectDataToProps) {\n      Object.assign(props, itemConfig.mapConnectDataToProps(fieldData));\n    }\n\n    Object.assign(this.component.instance, props);\n\n    this.component.changeDetectorRef.detectChanges();\n  }\n\n  registerOnChange(fn): void {\n    if (!this.component || !this.component.instance) {\n      return;\n    }\n\n    return this.component.instance.registerOnChange(fn);\n  }\n\n  registerOnTouched(fn): void {\n    if (!this.component || !this.component.instance) {\n      return;\n    }\n\n    return this.component.instance.registerOnTouched(fn);\n  }\n\n  writeValue(value: string | undefined): void {\n    if (!this.component || !this.component.instance) {\n      return;\n    }\n\n    this.component.instance.writeValue(value);\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    if (!this.component || !this.component.instance) {\n      return;\n    }\n\n    this.component.instance.setDisabledState(isDisabled);\n  }\n\n}\n",
            "selector": "[iiDynamicField]",
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DynamicFieldDirective), multi: true\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "fieldData",
                    "line": 29,
                    "type": "DynamicFieldData"
                },
                {
                    "name": "inputId",
                    "line": 30,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "component",
                    "type": "ComponentRef<ControlValueAccessor>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "config",
                        "type": "NgxFormModuleConfig"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "NgxFormModuleConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "DynamicFormComponent",
            "id": "component-DynamicFormComponent-4f713d84210998c396722543e3135b9e",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/dynamic-form/dynamic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ii-dynamic-form",
            "styleUrls": [
                "./dynamic-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttons",
                    "defaultValue": "[{\n    label: 'Submit',\n    onClick: () => this.validateAndSubmit()\n  }]",
                    "line": 34,
                    "type": "DynamicFormButton[]"
                },
                {
                    "name": "formCssClass",
                    "defaultValue": "''",
                    "line": 26
                },
                {
                    "name": "formData",
                    "line": 25,
                    "type": "DynamicFormData"
                },
                {
                    "name": "initialValues",
                    "defaultValue": "{}",
                    "line": 27,
                    "type": "Record<string | any>"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<ControlChangeData>"
                },
                {
                    "name": "groupChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 31,
                    "type": "EventEmitter<Record<string, any>>"
                },
                {
                    "name": "loadForm",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter<DynamicFormComponent>"
                },
                {
                    "name": "submitForm",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter<FormSubmitData>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dynamicComponents",
                    "type": "QueryList<DynamicFieldDirective>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "DynamicFieldDirective"
                        }
                    ]
                },
                {
                    "name": "group",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isSubmitting",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "getCssClass",
                    "args": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractControl",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormElement",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormGroupCssClass",
                    "args": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 91
                },
                {
                    "name": "getLabelCssClass",
                    "args": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRawValues",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "getValues",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "needToShowLabelOutside",
                    "args": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "onButtonClick",
                    "args": [
                        {
                            "name": "button",
                            "type": ""
                        },
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setErrors",
                    "args": [
                        {
                            "name": "formErrors",
                            "type": "FormError[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "formErrors",
                            "type": "FormError[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSubmitting",
                    "args": [
                        {
                            "name": "isSubmitting",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "isSubmitting",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateAndSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {AfterViewInit, Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, QueryList, ViewChildren} from '@angular/core';\nimport {DynamicFormData} from '../../interfaces/dynamic-form-data';\nimport {FormSubmitData} from '../../interfaces/form-submit-data';\nimport {ControlChangeData} from '../../interfaces/control-change-data';\nimport {AbstractControl, FormControl, FormGroup, ValidatorFn} from '@angular/forms';\nimport {DynamicFormButton} from '../../interfaces/dynamic-form-button';\nimport {Subject} from 'rxjs';\nimport {NGX_FORM_MODULE_CONFIG} from '../../constants/ngx-form-module-config';\nimport {NgxFormModuleConfig} from '../../interfaces/ngx-form-module-config';\nimport {DynamicFieldDirective} from '../../directives/dynamic-field.directive';\nimport {DynamicFieldData} from '../../interfaces/dynamic-field-data';\nimport {getFieldDataOptionValue, getGroupValidators, getValidators, needToShowLabelOutside} from '../../utils/dynamic-form';\nimport {takeUntil} from 'rxjs/operators';\nimport {DynamicFieldDataOption} from '../../interfaces/dynamic-field-data-option';\nimport {markAllFormControlsAsTouched, setFormErrors} from '../../utils/error';\nimport {FormError} from '../../interfaces/form-error';\n\n@Component({\n  selector: 'ii-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.css']\n})\nexport class DynamicFormComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  @Input() formData: DynamicFormData;\n  @Input() formCssClass = '';\n  @Input() initialValues: Record<string, 'any'> = {};\n\n  @Output() submitForm: EventEmitter<FormSubmitData> = new EventEmitter();\n  @Output() loadForm: EventEmitter<DynamicFormComponent> = new EventEmitter();\n  @Output() groupChange: EventEmitter<Record<string, any>> = new EventEmitter();\n  @Output() controlChange: EventEmitter<ControlChangeData> = new EventEmitter();\n\n  @Input() buttons: DynamicFormButton[] = [{\n    label: 'Submit',\n    onClick: () => this.validateAndSubmit()\n  }];\n\n  group: FormGroup;\n\n  isSubmitting = false;\n\n  @ViewChildren(DynamicFieldDirective) dynamicComponents: QueryList<DynamicFieldDirective>;\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  constructor(@Inject(NGX_FORM_MODULE_CONFIG) private config: NgxFormModuleConfig) {}\n\n  ngAfterViewInit(): void {\n    this.loadForm.emit(this);\n  }\n\n  ngOnInit(): void {\n\n    const groupValidators: ValidatorFn[] = [];\n\n    this.group = new FormGroup({});\n\n    this.formData.items.forEach((item: DynamicFieldData) => {\n      const validators: ValidatorFn[] = getValidators(item, this.config);\n\n      groupValidators.push(...getGroupValidators(item, this.config));\n\n      const value = this.initialValues[item.name];\n\n      const formControl = new FormControl(value, validators);\n\n      formControl.valueChanges.pipe(\n        takeUntil(this.destroy$)\n      ).subscribe(controlValue => this.controlChange.emit({\n        name: item.name,\n        formControl,\n        value: controlValue\n      }) );\n\n      this.group.addControl(item.name, formControl);\n    });\n\n    this.group.setValidators(groupValidators);\n\n    this.group.valueChanges.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(values => this.groupChange.emit(values));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.unsubscribe();\n  }\n\n  getGroup(): FormGroup {\n    return this.group;\n  }\n\n  getRawValues(): any {\n    return this.group.getRawValue();\n  }\n\n  getValues(): any {\n    return this.group.value;\n  }\n\n  getFormControl(name: string): AbstractControl {\n    if (!this.group.controls[name]) {\n      throw Error(`form control ${name} not found`);\n    }\n\n    return this.group.controls[name];\n  }\n\n  getFormElement(name: string): any {\n    const arr = this.dynamicComponents.toArray();\n\n    const connectFieldDirective = arr.find(item => item.fieldData.name === name);\n    if (!connectFieldDirective) {\n      throw Error(`component ${name} not found`);\n    }\n\n    return connectFieldDirective.component.instance;\n  }\n\n  getCssClass(fieldData: DynamicFieldData): string {\n    const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\n\n    return getFieldDataOptionValue(fieldDataOptions, 'cssClass', '');\n  }\n\n  getFormGroupCssClass(fieldData: DynamicFieldData): string {\n    const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\n\n    return getFieldDataOptionValue(fieldDataOptions, 'formGroupCssClass', '');\n  }\n\n  getLabelCssClass(fieldData: DynamicFieldData): string {\n    const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\n\n    return getFieldDataOptionValue(fieldDataOptions, 'labelCssClass', '');\n  }\n\n  needToShowLabelOutside(fieldData: DynamicFieldData): boolean {\n    return needToShowLabelOutside(fieldData, this.config);\n  }\n\n  onButtonClick(button, event): void {\n    event.preventDefault();\n\n    button.onClick({\n      form: this,\n      nativeEvent: event\n    });\n  }\n\n  validateAndSubmit(): void {\n    if (this.isSubmitting) {\n      return;\n    }\n    if (this.group.invalid) {\n      return markAllFormControlsAsTouched(this.group);\n    }\n\n    const formData: any = this.group.getRawValue();\n\n    this.isSubmitting = true;\n    this.submitForm.emit({\n      values: formData,\n      setSubmitting: (isSubmitting: boolean) => this.setSubmitting(isSubmitting),\n      setErrors: (errors: FormError[]) => this.setErrors(errors)\n    });\n  }\n\n  setErrors(formErrors: FormError[]): void {\n    setFormErrors(this.group, formErrors);\n    this.isSubmitting = false;\n  }\n\n  setSubmitting(isSubmitting: boolean): void {\n    this.isSubmitting = isSubmitting;\n  }\n\n  setValues(values: any): void {\n    this.group.setValue(values);\n  }\n\n  patchValues(values: any): void {\n    this.group.patchValue(values);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "NgxFormModuleConfig"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "NgxFormModuleConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "template: `\n<form [formGroup]=\"group\" novalidate *ngIf=\"formData\" [class]=\"formCssClass\">\n  <ii-form-validation-errors [group]=\"group\"></ii-form-validation-errors>\n\n  <div class=\"container\">\n    <div class=\"row\">\n      <div *ngFor=\"let fieldData of formData.items; let i = index\" [class]=\"getCssClass(fieldData)\">\n        <div [class]=\"'form-group ' + getFormGroupCssClass(fieldData)\">\n          <ii-validation-control [control]=\"group.controls[fieldData.name]\">\n            <label [for]=\"fieldData.name + '_' + i\" *ngIf=\"needToShowLabelOutside(fieldData)\" [innerHTML]=\"fieldData.label\" [class]=\"getLabelCssClass(fieldData)\"></label>\n            <ng-container\n              iiDynamicField\n              [inputId]=\"fieldData.name + '_' + i\"\n              [formControl]=\"group.controls[fieldData.name]\"\n              [fieldData]=\"fieldData\">\n            </ng-container>\n          </ii-validation-control>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"connect-form-buttons-container\">\n          <div [class]=\"button.cssContainerClass || ''\" *ngFor=\"let button of buttons\">\n            <button [class]=\"'btn btn-primary ' + button.cssClass || ''\" [class.disabled]=\"group.invalid\" (click)=\"onButtonClick(button, $event)\">\n              <i class=\"fa fa-spinner fa-pulse\" *ngIf=\"isSubmitting\"></i>\n              {{button.label}}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n`\n"
        },
        {
            "name": "FieldsetComponent",
            "id": "component-FieldsetComponent-fb063601070cd77577117df045fa89e2",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/fieldset/fieldset.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FieldsetComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "ii-fieldset",
            "styleUrls": [
                "./fieldset.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./fieldset.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "initialValues",
                    "defaultValue": "{}",
                    "line": 25,
                    "type": "any"
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 23,
                    "type": "DynamicFieldData[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "group",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "propagateTouch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabelCssClass",
                    "args": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "needToShowLabelOutside",
                    "args": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, forwardRef, Inject, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, FormControl, FormGroup, NG_VALUE_ACCESSOR, ValidatorFn} from '@angular/forms';\nimport {DynamicFieldData} from '../../interfaces/dynamic-field-data';\nimport {NGX_FORM_MODULE_CONFIG} from '../../constants/ngx-form-module-config';\nimport {NgxFormModuleConfig} from '../../interfaces/ngx-form-module-config';\nimport {getFieldDataOptionValue, getValidators, needToShowLabelOutside} from '../../utils/dynamic-form';\nimport {DynamicFieldDataOption} from '../../interfaces/dynamic-field-data-option';\n\n@Component({\n  selector: 'ii-fieldset',\n  templateUrl: './fieldset.component.html',\n  styleUrls: ['./fieldset.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FieldsetComponent),\n      multi: true\n    }\n  ]\n})\nexport class FieldsetComponent implements OnInit, ControlValueAccessor {\n\n  @Input() items: DynamicFieldData[] = [];\n\n  @Input() initialValues: any = {};\n\n  group: FormGroup;\n\n  constructor(@Inject(NGX_FORM_MODULE_CONFIG) private config: NgxFormModuleConfig) {}\n\n  ngOnInit(): void {\n\n    this.group = new FormGroup({});\n\n    this.items.forEach((item: DynamicFieldData) => {\n      const validators: ValidatorFn[] = getValidators(item, this.config);\n\n      const value = this.initialValues[item.name];\n      this.group.addControl(item.name, new FormControl(value, validators));\n    });\n\n    this.group.valueChanges.subscribe((val) => {\n      this.propagateChange(val);\n    });\n  }\n\n  getLabelCssClass(fieldData: DynamicFieldData): string {\n    const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\n\n    return getFieldDataOptionValue(fieldDataOptions, 'labelCssClass', '');\n  }\n\n  needToShowLabelOutside(fieldData: DynamicFieldData): boolean {\n    return needToShowLabelOutside(fieldData, this.config);\n  }\n\n\n  propagateChange = (_: any) => {};\n  propagateTouch = () => {};\n\n  registerOnChange(fn): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: any): void {\n    if (value) {\n      this.group.setValue(value, {\n        emitEvent: false\n      });\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.group.disable();\n    } else {\n      this.group.enable();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./fieldset.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "NgxFormModuleConfig"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "NgxFormModuleConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<fieldset [formGroup]=\"group\" novalidate>\n  <ii-validation-control [control]=\"group.controls[fieldData.name]\" *ngFor=\"let fieldData of items\">\n    <label [for]=\"fieldData.name\" *ngIf=\"needToShowLabelOutside(fieldData)\" [innerHTML]=\"fieldData.label\" [class]=\"getLabelCssClass(fieldData)\"></label>\n    <ng-container\n      iiDynamicField\n      [inputId]=\"fieldData.name\"\n      [formControl]=\"group.controls[fieldData.name]\"\n      [fieldData]=\"fieldData\">\n    </ng-container>\n  </ii-validation-control>\n</fieldset>\n"
        },
        {
            "name": "FormValidationErrorsComponent",
            "id": "component-FormValidationErrorsComponent-75a7ed502c155cf7360e4b3d456e7dbf",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/form-validation-errors/form-validation-errors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ii-form-validation-errors",
            "styleUrls": [
                "./form-validation-errors.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form-validation-errors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "group",
                    "line": 12,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'ii-form-validation-errors',\r\n  templateUrl: './form-validation-errors.component.html',\r\n  styleUrls: ['./form-validation-errors.component.css']\r\n})\r\nexport class FormValidationErrorsComponent implements OnInit {\r\n\r\n  @Input()\r\n  group: FormGroup;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-validation-errors.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-validation-errors\">\r\n  <ng-container *ngIf=\"group.errors\">\r\n    <div *ngFor=\"let error of group.errors | keyvalue\" class=\"alert alert-danger form-validation-errors__item\">{{error.key | validationMessage:error.value}}</div>\r\n  </ng-container>\r\n</div>\r\n\r\n"
        },
        {
            "name": "HtmlComponent",
            "id": "component-HtmlComponent-426f8b848112b7933c869a89a0fc793a",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/html/html.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => HtmlComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "ii-html",
            "styleUrls": [
                "./html.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./html.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cssClass",
                    "defaultValue": "''",
                    "line": 18
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "propagateTouch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, forwardRef, Input} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n@Component({\n  selector: 'ii-html',\n  templateUrl: './html.component.html',\n  styleUrls: ['./html.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => HtmlComponent),\n      multi: true\n    }\n  ]\n})\nexport class HtmlComponent implements ControlValueAccessor {\n\n  @Input() cssClass = '';\n\n  value = '';\n\n  isDisabled = false;\n\n  constructor() { }\n\n  propagateChange = (_: any) => {};\n  propagateTouch = () => {};\n\n  registerOnChange(fn): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: string | undefined): void {\n    if (value !== undefined) {\n      this.value = value;\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./html.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div [class]=\"cssClass\" [innerHTML]=\"value\"></div>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-245dfcc161616270c9f4a752fc9067e0",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "ii-input",
            "styleUrls": [
                "./input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "line": 20
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 19
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 21
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 18
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "propagateTouch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, forwardRef, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n@Component({\n  selector: 'ii-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]\n})\nexport class InputComponent implements ControlValueAccessor {\n\n  @Input() type = 'text';\n  @Input() placeholder = '';\n  @Input() inputId = '';\n  @Input() readonly = false;\n\n  value = '';\n\n  isDisabled = false;\n\n  constructor() { }\n\n  propagateChange = (_: any) => {};\n  propagateTouch = () => {};\n\n  registerOnChange(fn): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: string | undefined): void {\n    if (value !== undefined) {\n      this.value = value;\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<input\n  [value]=\"value\"\n  [type]=\"type\"\n  [id]=\"inputId\"\n  [placeholder]=\"placeholder\"\n  (input)=\"propagateChange($event.target.value)\"\n  (blur)=\"propagateTouch()\"\n  [readonly]=\"readonly\"\n  [disabled]=\"isDisabled\">\n"
        },
        {
            "name": "MultiFieldsetComponent",
            "id": "component-MultiFieldsetComponent-159fecc0e0265e1e211e20e28f8b4f1a",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/multi-fieldset/multi-fieldset.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MultiFieldsetComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "ii-multi-fieldset",
            "styleUrls": [
                "./multi-fieldset.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-fieldset.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "initialValues",
                    "defaultValue": "{}",
                    "line": 25,
                    "type": "any"
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 23,
                    "type": "DynamicFieldData[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "group",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "propagateTouch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "generateGroupItem",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getFormArrayControls",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup[]",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabelCssClass",
                    "args": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "needToShowLabelOutside",
                    "args": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "fieldData",
                            "type": "DynamicFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, forwardRef, Inject, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, FormArray, FormControl, FormGroup, NG_VALUE_ACCESSOR, ValidatorFn} from '@angular/forms';\nimport {DynamicFieldData} from '../../interfaces/dynamic-field-data';\nimport {NGX_FORM_MODULE_CONFIG} from '../../constants/ngx-form-module-config';\nimport {NgxFormModuleConfig} from '../../interfaces/ngx-form-module-config';\nimport {getFieldDataOptionValue, getValidators, needToShowLabelOutside} from '../../utils/dynamic-form';\nimport {DynamicFieldDataOption} from '../../interfaces/dynamic-field-data-option';\n\n@Component({\n  selector: 'ii-multi-fieldset',\n  templateUrl: './multi-fieldset.component.html',\n  styleUrls: ['./multi-fieldset.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MultiFieldsetComponent),\n      multi: true\n    }\n  ]\n})\nexport class MultiFieldsetComponent implements OnInit, ControlValueAccessor {\n\n  @Input() items: DynamicFieldData[] = [];\n\n  @Input() initialValues: any = {};\n\n  group: FormGroup;\n\n  constructor(@Inject(NGX_FORM_MODULE_CONFIG) private config: NgxFormModuleConfig) {}\n\n  addItem(): void {\n    const groupItem = this.generateGroupItem();\n\n    (this.group.controls.items as FormArray).push(groupItem);\n  }\n\n  getFormArrayControls(formGroup: FormGroup, key: string): FormGroup[] {\n    return (formGroup.controls[key] as FormArray).controls as FormGroup[];\n  }\n\n  removeItem(index: number): void {\n    (this.group.controls.items as FormArray).removeAt(index);\n  }\n\n  ngOnInit(): void {\n\n    const groupItem = this.generateGroupItem();\n\n    const formArray = new FormArray([\n      groupItem\n    ]);\n\n    this.group = new FormGroup({\n      items: formArray\n    });\n\n    // debugger;\n\n    this.group.valueChanges.subscribe((val) => {\n      this.propagateChange(val);\n    });\n  }\n\n  getLabelCssClass(fieldData: DynamicFieldData): string {\n    const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\n\n    return getFieldDataOptionValue(fieldDataOptions, 'labelCssClass', '');\n  }\n\n  needToShowLabelOutside(fieldData: DynamicFieldData): boolean {\n    return needToShowLabelOutside(fieldData, this.config);\n  }\n\n  private generateGroupItem(): FormGroup {\n    const group = new FormGroup({});\n\n    this.items.forEach((item: DynamicFieldData) => {\n      const validators: ValidatorFn[] = getValidators(item, this.config);\n\n      const value = this.initialValues[item.name];\n      group.addControl(item.name, new FormControl(value, validators));\n    });\n\n    return group;\n  }\n\n\n  propagateChange = (_: any) => {};\n  propagateTouch = () => {};\n\n  registerOnChange(fn): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: any): void {\n    if (value) {\n      this.group.setValue(value, {\n        emitEvent: false\n      });\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.group.disable();\n    } else {\n      this.group.enable();\n    }\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./multi-fieldset.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "NgxFormModuleConfig"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "NgxFormModuleConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div [formGroup]=\"group\" novalidate>\n  <fieldset *ngFor=\"let groupItem of getFormArrayControls(group, 'items'); let i = index\">\n    <ii-validation-control [control]=\"groupItem.controls[fieldData.name]\" *ngFor=\"let fieldData of items\">\n      <label [for]=\"fieldData.name + '_' + i\" *ngIf=\"needToShowLabelOutside(fieldData)\" [innerHTML]=\"fieldData.label\" [class]=\"getLabelCssClass(fieldData)\"></label>\n      <ng-container\n        iiDynamicField\n        [inputId]=\"fieldData.name + '_' + i\"\n        [formControl]=\"groupItem.controls[fieldData.name]\"\n        [fieldData]=\"fieldData\">\n      </ng-container>\n    </ii-validation-control>\n    <button (click)=\"removeItem(i)\" class=\"btn btn-warning\">Remove</button>\n  </fieldset>\n  <button (click)=\"addItem()\" class=\"btn btn-success mt-3\">Add</button>\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-edde3f5a54dcbb5ff28fd7872a1f3639",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "ii-select",
            "styleUrls": [
                "./select.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "line": 21
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 19,
                    "type": "SelectOption[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "propagateTouch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOptions",
                    "args": [
                        {
                            "name": "options",
                            "type": "SelectOption[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "SelectOption[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByOption",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "item",
                            "type": "SelectOption"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "SelectOption",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, forwardRef, Input} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {SelectOption} from '../../interfaces/select-option';\n\n@Component({\n  selector: 'ii-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n      multi: true\n    }\n  ]\n})\nexport class SelectComponent implements ControlValueAccessor {\n\n  @Input() options: SelectOption[] = [];\n\n  @Input() inputId = '';\n\n  value = '';\n\n  isDisabled = false;\n\n  constructor() { }\n\n  trackByOption(index: number, item: SelectOption): string {\n    return item.id;\n  }\n\n  propagateChange = (_: any) => {};\n  propagateTouch = () => {};\n\n  registerOnChange(fn): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: string | undefined): void {\n    if (value !== undefined) {\n      this.value = value;\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  setOptions(options: SelectOption[]): void {\n    this.options = options;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<select\n  [ngModel]=\"value\"\n  [id]=\"inputId\"\n  (change)=\"propagateChange($event.target.value)\"\n  (blur)=\"propagateTouch()\"\n  [disabled]=\"isDisabled\">\n  <option [value]=\"option.id\" *ngFor=\"let option of options; trackBy: trackByOption\">{{option.value}}</option>\n</select>\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-26805fc3688e57ea712bc376110ca8d5",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextareaComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "ii-textarea",
            "styleUrls": [
                "./textarea.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "line": 20
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 19
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 21
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 18
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "propagateTouch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, forwardRef, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n@Component({\n  selector: 'ii-textarea',\n  templateUrl: './textarea.component.html',\n  styleUrls: ['./textarea.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TextareaComponent),\n      multi: true\n    }\n  ]\n})\nexport class TextareaComponent implements ControlValueAccessor {\n\n  @Input() type = 'text';\n  @Input() placeholder = '';\n  @Input() inputId = '';\n  @Input() readonly = false;\n\n  value = '';\n\n  isDisabled = false;\n\n  constructor() { }\n\n  propagateChange = (_: any) => {};\n  propagateTouch = () => {};\n\n  registerOnChange(fn): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn): void {\n    this.propagateTouch = fn;\n  }\n\n  writeValue(value: string | undefined): void {\n    if (value !== undefined) {\n      this.value = value;\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n}\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./textarea.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<textarea\n  [value]=\"value\"\n  [id]=\"inputId\"\n  [placeholder]=\"placeholder\"\n  (input)=\"propagateChange($event.target.value)\"\n  (blur)=\"propagateTouch()\"\n  [readonly]=\"readonly\"\n  [disabled]=\"isDisabled\"></textarea>\n"
        },
        {
            "name": "ValidationControlComponent",
            "id": "component-ValidationControlComponent-47b3f809ba3ead241dcfbef7afbdad01",
            "file": "projects/ildar-icoosoft/ngx-form/src/lib/components/validation-control/validation-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ii-validation-control",
            "styleUrls": [
                "./validation-control.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./validation-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 11,
                    "type": "FormControl"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'ii-validation-control',\r\n  templateUrl: './validation-control.component.html',\r\n  styleUrls: ['./validation-control.component.css']\r\n})\r\nexport class ValidationControlComponent {\r\n  @Input()\r\n  control: FormControl;\r\n\r\n  constructor() {}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./validation-control.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div class=\"validation-control\"\r\n     [class.has-error]=\"control.invalid && control.touched\">\r\n  <ng-content></ng-content>\r\n  <ng-container *ngIf=\"control.invalid && control.touched\">\r\n    <div *ngFor=\"let error of control.errors | keyvalue\" class=\"alert alert-danger validation-control__error\">{{error.key | validationMessage:error.value}}</div>\r\n  </ng-container>\r\n</div>\r\n\r\n"
        }
    ],
    "modules": [
        {
            "name": "NgxCommonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DynamicFieldDirective"
                        },
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "FieldsetComponent"
                        },
                        {
                            "name": "FormValidationErrorsComponent"
                        },
                        {
                            "name": "HtmlComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "MultiFieldsetComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        },
                        {
                            "name": "ValidationControlComponent"
                        },
                        {
                            "name": "ValidationMessagePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DynamicFieldDirective"
                        },
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "FieldsetComponent"
                        },
                        {
                            "name": "FormValidationErrorsComponent"
                        },
                        {
                            "name": "HtmlComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "MultiFieldsetComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        },
                        {
                            "name": "ValidationControlComponent"
                        },
                        {
                            "name": "ValidationMessagePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-common/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultNgxFormModuleConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/configs/ngx-form-mdule.config.ts",
                "type": "NgxFormModuleConfig",
                "defaultValue": "{\r\n  fields: {\r\n    text: {\r\n      component: InputComponent,\r\n      needToShowLabelOutside: true,\r\n      props: {\r\n        type: 'text'\r\n      },\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        const readonly: boolean = getFieldDataOptionValue(fieldDataOptions, 'readonly', false);\r\n\r\n        const placeholder: string | undefined = getFieldDataOptionValue(fieldDataOptions, 'placeholder', '');\r\n        return {\r\n          placeholder,\r\n          readonly\r\n        };\r\n      }\r\n    },\r\n    number: {\r\n      component: InputComponent,\r\n      needToShowLabelOutside: true,\r\n      props: {\r\n        type: 'number'\r\n      },\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        const readonly: boolean = getFieldDataOptionValue(fieldDataOptions, 'readonly', false);\r\n\r\n        const placeholder: string | undefined = getFieldDataOptionValue(fieldDataOptions, 'placeholder', '');\r\n        return {\r\n          placeholder,\r\n          readonly\r\n        };\r\n      }\r\n    },\r\n    textarea: {\r\n      component: TextareaComponent,\r\n      needToShowLabelOutside: true,\r\n      props: {},\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        const readonly: boolean = getFieldDataOptionValue(fieldDataOptions, 'readonly', false);\r\n\r\n        const placeholder: string | undefined = getFieldDataOptionValue(fieldDataOptions, 'placeholder', '');\r\n        return {\r\n          placeholder,\r\n          readonly\r\n        };\r\n      }\r\n    },\r\n    select: {\r\n      component: SelectComponent,\r\n      needToShowLabelOutside: true,\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        let selectOptions = [];\r\n\r\n        const selectOptionsStr: string = getFieldDataOptionValue(fieldDataOptions, 'options');\r\n        if (selectOptionsStr) {\r\n          selectOptions = JSON.parse(selectOptionsStr).map(item => ({\r\n            id: item.name,\r\n            value: item.label\r\n          }));\r\n        }\r\n\r\n        return {\r\n          options: selectOptions\r\n        };\r\n      }\r\n    },\r\n    email: {\r\n      component: InputComponent,\r\n      needToShowLabelOutside: true,\r\n      props: {\r\n        type: 'email'\r\n      },\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        const placeholder: string | undefined = getFieldDataOptionValue(fieldDataOptions, 'placeholder', '');\r\n        return {\r\n          placeholder\r\n        };\r\n      }\r\n    },\r\n    fieldset: {\r\n      component: FieldsetComponent,\r\n      needToShowLabelOutside: true,\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        return {\r\n          items: fieldData.items\r\n        };\r\n      }\r\n    },\r\n    multiFieldset: {\r\n      component: MultiFieldsetComponent,\r\n      needToShowLabelOutside: true,\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        return {\r\n          items: fieldData.items\r\n        };\r\n      }\r\n    },\r\n    html: {\r\n      component: HtmlComponent,\r\n      needToShowLabelOutside: true,\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        return {\r\n          // label: connectData.label,\r\n          cssClass: getFieldDataOptionValue(fieldDataOptions, 'inputCssClass', '')\r\n        };\r\n      }\r\n    },\r\n  },\r\n  validators: {\r\n    required: {\r\n      isGroupValidator: false,\r\n      validator: () => {\r\n        return Validators.required;\r\n      }\r\n    },\r\n    email: {\r\n      isGroupValidator: false,\r\n      validator: () => {\r\n        return Validators.email;\r\n      }\r\n    },\r\n    passwordMatch: {\r\n      isGroupValidator: true,\r\n      validator: (fieldData: DynamicFieldData) => {\r\n        const a = 'password';\r\n        const b = fieldData.name;\r\n\r\n        return validateEqual(a, b);\r\n      }\r\n    }\r\n  },\r\n  errorMessages: {\r\n    required: 'This field is required',\r\n    email: 'Wrong email format',\r\n    mismatch: 'Field values mismatch',\r\n    minlength: 'Field length is too short must be {requiredLength}, actual is {actualLength}',\r\n    maxlength: 'Field length is too long must be {requiredLength}, actual is {actualLength}',\r\n    age: 'The age under {requiredAge} is not accepted',\r\n    min: 'The minimum value for an input field is {min}',\r\n    max: 'The maximum value for an input field is {max}',\r\n  }\r\n}"
            },
            {
                "name": "DynamicForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: DynamicFormComponent,\r\n  props: {\r\n    formData: dynamicFormData,\r\n    initialValues: {\r\n      html: text('html', 'some HTML text'),\r\n      text: 'some text',\r\n      select: 'twitter-follow-button'\r\n    },\r\n    submit: handleSubmit,\r\n    groupChange: handleChange\r\n  },\r\n})"
            },
            {
                "name": "dynamicFormData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "data-sample/dynamic-form.ts",
                "type": "DynamicFormData",
                "defaultValue": "{\r\n  items: [\r\n    {\r\n      label: 'Custom HTML',\r\n      name: 'html',\r\n      type: 'html',\r\n      options: [\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Text <span class=\"required-sign\">(*)</span>',\r\n      name: 'text',\r\n      type: 'text',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'text placeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Textarea <span class=\"required-sign\">(*)</span>',\r\n      name: 'textarea',\r\n      type: 'textarea',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'text plaeeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Email <span class=\"required-sign\">(*)</span>',\r\n      name: 'email',\r\n      type: 'email',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'email placeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}, {\"name\":\"email\",\"options\":[]}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Password <span class=\"required-sign\">(*)</span>',\r\n      name: 'password',\r\n      type: 'password',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'password placeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Confirm Password <span class=\"required-sign\">(*)</span>',\r\n      name: 'confirmPassword',\r\n      type: 'password',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'confirm password placeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}, {\"name\": \"passwordMatch\", \"options\": []}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Select',\r\n      name: 'select',\r\n      type: 'select',\r\n      options: [\r\n        {\r\n          name: 'default',\r\n          value: 'twitter-share-button',\r\n        },\r\n        {\r\n          name: 'options',\r\n          value:\r\n            '[{\"name\":\"twitter-share-button\",\"label\":\"Share\",\"position\":\"0\"},{\"name\":\"twitter-follow-button\",\"label\":\"Follow\",\"position\":\"1\"},{\"name\":\"twitter-hashtag-button\",\"label\":\"Hashtag\",\"position\":\"2\"},{\"name\":\"twitter-mention-button\",\"label\":\"Mention\",\"position\":\"3\"},{\"name\":\"twitter-tweet\",\"label\":\"Tweet\",\"position\":\"4\"},{\"name\":\"twitter-tweet\",\"label\":\"Tweet\",\"position\":\"4\"},{\"name\":\"twitter-timeline\",\"label\":\"Timeline\",\"position\":\"5\"}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Webix text',\r\n      name: 'webixText',\r\n      type: 'webixText',\r\n      options: [\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Fieldset',\r\n      name: 'fieldset',\r\n      type: 'fieldset',\r\n      options: [\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-12\"}]'\r\n        },\r\n        {\r\n          name: 'formGroupCssClass',\r\n          value: 'fieldset-wrapper'\r\n        }\r\n      ],\r\n      items: [\r\n        {\r\n          label: 'Webix Text',\r\n          name: 'webixText2',\r\n          type: 'text',\r\n          options: [\r\n            {\r\n              name: 'placeholder',\r\n              value: 'Webix Text',\r\n            }\r\n          ],\r\n          items: [],\r\n        },\r\n        {\r\n          label: 'Webix Text',\r\n          name: 'webixText3',\r\n          type: 'text',\r\n          options: [\r\n            {\r\n              name: 'placeholder',\r\n              value: 'Webix Text 2',\r\n            }\r\n          ],\r\n          items: [],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      label: 'Multi Fieldset',\r\n      name: 'multiFieldset',\r\n      type: 'multiFieldset',\r\n      options: [\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-12\"}]'\r\n        },\r\n        {\r\n          name: 'formGroupCssClass',\r\n          value: 'fieldset-wrapper'\r\n        }\r\n      ],\r\n      items: [\r\n        {\r\n          label: 'Webix Text',\r\n          name: 'webixText3',\r\n          type: 'text',\r\n          options: [\r\n            {\r\n              name: 'placeholder',\r\n              value: 'Webix Text',\r\n            }\r\n          ],\r\n          items: [],\r\n        },\r\n        {\r\n          label: 'Webix Checkbox',\r\n          name: 'text2',\r\n          type: 'text',\r\n          options: [],\r\n          items: [],\r\n        },\r\n      ],\r\n    },\r\n  ]\r\n\r\n}"
            },
            {
                "name": "fieldset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: FieldsetComponent,\r\n  props: {\r\n    label: 'Fieldset',\r\n    items: [\r\n      {\r\n        label: 'Webix Text',\r\n        name: 'webixText',\r\n        type: 'webixText',\r\n        options: [],\r\n        items: [],\r\n      },\r\n      {\r\n        label: 'Webix Checkbox',\r\n        name: 'webixCheckbox',\r\n        type: 'webixCheckbox',\r\n        options: [],\r\n        items: [],\r\n      },\r\n    ]\r\n  },\r\n})"
            },
            {
                "name": "formSample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/0-NgxForm-validation.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  template: `\r\n  <form [formGroup]=\"group\" novalidate (submit)=\"handleSubmit(group)\">\r\n    <ii-form-validation-errors [group]=\"group\"></ii-form-validation-errors>\r\n    <ii-validation-control [control]=\"group.controls.email\">\r\n      <input type=\"email\" formControlName=\"email\" placeholder=\"email\">\r\n    </ii-validation-control>\r\n    <ii-validation-control [control]=\"group.controls.password\">\r\n        <input type=\"password\" formControlName=\"password\" placeholder=\"password\">\r\n    </ii-validation-control>\r\n    <button [disabled]=\"!group.valid\">Submit</button>\r\n</form>\r\n`,\r\n  props: {\r\n    group: new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8)])\r\n    }),\r\n    handleSubmit\r\n  },\r\n})"
            },
            {
                "name": "getFieldDataOptionValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                "type": "",
                "defaultValue": "(options: DynamicFieldDataOption[], name: string, defaultValue: any = undefined) => {\r\n  const option: DynamicFieldDataOption | undefined = options.find(item => item.name === name);\r\n  if (option) {\r\n    return option.value;\r\n  }\r\n\r\n  return defaultValue;\r\n}"
            },
            {
                "name": "getGroupValidators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                "type": "",
                "defaultValue": "(fieldData: DynamicFieldData, config: NgxFormModuleConfig): ValidatorFn[] => {\r\n  const validators: ValidatorFn[] = [];\r\n  fieldData.options.forEach(option => {\r\n    if (option.name === 'validators') {\r\n      const dynamicFormValidators: any[] = JSON.parse(option.value);\r\n\r\n      dynamicFormValidators.forEach(dynamicFormValidator => {\r\n        const validatorName = dynamicFormValidator.name;\r\n        const validatorArgs = dynamicFormValidator.options;\r\n\r\n        if (config.validators[validatorName] && config.validators[validatorName].isGroupValidator) {\r\n          validators.push(config.validators[validatorName].validator.call(null, fieldData, ...validatorArgs));\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return validators;\r\n}"
            },
            {
                "name": "getValidators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                "type": "",
                "defaultValue": "(fieldData: DynamicFieldData, config: NgxFormModuleConfig): ValidatorFn[] => {\r\n  const validators: ValidatorFn[] = [];\r\n  fieldData.options.forEach(option => {\r\n    if (option.name === 'validators') {\r\n      const dynamicFormValidators: any[] = JSON.parse(option.value);\r\n\r\n      dynamicFormValidators.forEach(dynamicFormValidator => {\r\n        const validatorName = dynamicFormValidator.name;\r\n        const validatorArgs = dynamicFormValidator.options;\r\n\r\n        if (config.validators[validatorName] && !config.validators[validatorName].isGroupValidator) {\r\n          validators.push(config.validators[validatorName].validator.call(null, fieldData, ...validatorArgs));\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return validators;\r\n}"
            },
            {
                "name": "handleChange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "(data: any) => {\r\n  action('form-change');\r\n}"
            },
            {
                "name": "handleSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/0-NgxForm-validation.stories.ts",
                "type": "",
                "defaultValue": "(group: FormGroup) => {\r\n  action('submit-click');\r\n  window.setTimeout(() => {\r\n    setFormErrors(group, [{\r\n      message: 'Some form error'\r\n    }]);\r\n  }, 3000);\r\n}"
            },
            {
                "name": "handleSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "(data: FormSubmitData) => {\r\n  action('button-click');\r\n  window.setTimeout(() => {\r\n    data.setSubmitting(false);\r\n  }, 3000);\r\n}"
            },
            {
                "name": "html",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  template: `<ii-html [(ngModel)]=\"model\" [label]=\"'Custom HTML'\"></ii-html>`,\r\n  props: {\r\n    label: 'Webix Text',\r\n    model: text('model',  '<span>Any custom HTML</span>'),\r\n  },\r\n})"
            },
            {
                "name": "InputEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: InputComponent,\r\n  props: {\r\n    type: 'email',\r\n    placeholder: text('placeholder', 'Enter Email'),\r\n  },\r\n})"
            },
            {
                "name": "InputPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: InputComponent,\r\n  props: {\r\n    type: 'password',\r\n    placeholder: text('placeholder', 'Enter Password'),\r\n  },\r\n})"
            },
            {
                "name": "InputText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: InputComponent,\r\n  props: {\r\n    placeholder: text('placeholder', 'Enter Text'),\r\n  },\r\n})"
            },
            {
                "name": "markAllFormControlsAsTouched",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "",
                "defaultValue": "(formGroup: FormGroup): void => {\r\n  Object.keys(formGroup.controls).forEach(field => {\r\n    const control = formGroup.get(field);\r\n    if (control instanceof FormControl) {\r\n      control.markAsTouched({ onlySelf: true });\r\n    } else if (control instanceof FormGroup) {\r\n      markAllFormControlsAsTouched(control);\r\n    }\r\n  });\r\n}"
            },
            {
                "name": "multiFieldset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: MultiFieldsetComponent,\r\n  props: {\r\n    label: 'Multi Fieldset',\r\n    items: [\r\n      {\r\n        label: 'Text',\r\n        name: 'text1',\r\n        type: 'text',\r\n        options: [],\r\n        items: [],\r\n      },\r\n      {\r\n        label: 'Text2',\r\n        name: 'text2',\r\n        type: 'text',\r\n        options: [],\r\n        items: [],\r\n      },\r\n    ]\r\n  },\r\n})"
            },
            {
                "name": "needToShowLabelOutside",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                "type": "",
                "defaultValue": "(fieldData: DynamicFieldData, config: NgxFormModuleConfig): boolean => {\r\n  const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n  let result = getFieldDataOptionValue(fieldDataOptions, 'needToShowLabelOutside');\r\n\r\n  if (result !== undefined) {\r\n    return result;\r\n  }\r\n\r\n  const itemConfig = config.fields[fieldData.type];\r\n  if (!itemConfig) {\r\n    const supportedTypes: string = Object.keys(config.fields).join(', ');\r\n    throw Error(\r\n      `Trying to use an unsupported type (${fieldData.type}).\r\n        Supported types: ${supportedTypes}`\r\n    );\r\n  }\r\n\r\n  result = itemConfig.needToShowLabelOutside || false;\r\n\r\n  return result;\r\n}"
            },
            {
                "name": "NGX_FORM_MODULE_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/constants/ngx-form-module-config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<NgxFormModuleConfig>('NGX_FORM_MODULE_CONFIG')"
            },
            {
                "name": "prepareValidationMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "",
                "defaultValue": "(value: string): string => {\r\n  return value;\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-common/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "safePipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/2-NgxCommon.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  template: `\r\n  <h4>An untrusted URL:</h4>\r\n<p><a class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\">Click me</a></p>\r\n<h4>A trusted URL:</h4>\r\n<p><a class=\"e2e-trusted-url\" [href]=\"dangerousUrl | safe:'url'\">Click me</a></p>\r\n`,\r\n  props: {\r\n    dangerousUrl: 'javascript:alert(\"Hi there\")'\r\n  },\r\n})"
            },
            {
                "name": "Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: SelectComponent,\r\n  props: {\r\n    options: [{\r\n      id: '1',\r\n      value: 'Option 1'\r\n    }, {\r\n      id: '2',\r\n      value: 'Option 2'\r\n    }, {\r\n      id: '3',\r\n      value: 'Option 3'\r\n    }, {\r\n      id: '4',\r\n      value: 'Option 4'\r\n    }, {\r\n      id: '5',\r\n      value: 'Option 5'\r\n    }, {\r\n      id: '6',\r\n      value: 'Option 6'\r\n    }]\r\n  },\r\n})"
            },
            {
                "name": "setFormErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "",
                "defaultValue": "(\r\n  formGroup: FormGroup,\r\n  formErrors: FormError[]\r\n): void => {\r\n  const formGroupErrors: string[] = [];\r\n  const formControlErrors: Record<string, string[]> = {};\r\n\r\n  formErrors.forEach(item => {\r\n    const formControlName = item.formControlName;\r\n\r\n    if (!formControlName) {\r\n      return formGroupErrors.push(item.message);\r\n    }\r\n\r\n    const formControl = formGroup.get(formControlName);\r\n\r\n    if (formControl) {\r\n      if (!formControlErrors[formControlName]) {\r\n        formControlErrors[formControlName] = [];\r\n      }\r\n      formControlErrors[formControlName].push(item.message);\r\n    } else {\r\n      formGroupErrors.push(item.message);\r\n    }\r\n  });\r\n\r\n  if (formGroupErrors.length) {\r\n    formGroup.setErrors({\r\n      customArr: formGroupErrors\r\n    });\r\n  }\r\n\r\n  for (const formControlName in formControlErrors) {\r\n    const formControl = formGroup.get(formControlName);\r\n\r\n    formControl.setErrors({\r\n      customArr: formControlErrors[formControlName]\r\n    });\r\n  }\r\n\r\n  markAllFormControlsAsTouched(formGroup);\r\n}"
            },
            {
                "name": "validateEqual",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ildar-icoosoft/ngx-form/src/lib/validators/index.ts",
                "type": "",
                "defaultValue": "(\r\n  a: FormControl | string,\r\n  b: FormControl | string\r\n) => {\r\n  return (group: FormGroup): { [s: string]: boolean } => {\r\n    const controlA = a instanceof FormControl ? a : group.root.get(a);\r\n    const controlB = b instanceof FormControl ? b : group.root.get(b);\r\n\r\n    const controlBErrors = controlB.errors;\r\n\r\n    if (controlA && controlB && controlA.value !== controlB.value) {\r\n      controlB.setErrors(\r\n        Object.assign({}, controlBErrors, {\r\n          mismatch: true\r\n        })\r\n      );\r\n    } else {\r\n      if (controlB.hasError('mismatch')) {\r\n        const newErrors = _omit(controlBErrors, 'mismatch');\r\n        controlB.setErrors(_isEmpty(newErrors) ? null : newErrors);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/ildar-icoosoft/ngx-common/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-common/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-common/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/configs/ngx-form-mdule.config.ts": [
                {
                    "name": "defaultNgxFormModuleConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/configs/ngx-form-mdule.config.ts",
                    "type": "NgxFormModuleConfig",
                    "defaultValue": "{\r\n  fields: {\r\n    text: {\r\n      component: InputComponent,\r\n      needToShowLabelOutside: true,\r\n      props: {\r\n        type: 'text'\r\n      },\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        const readonly: boolean = getFieldDataOptionValue(fieldDataOptions, 'readonly', false);\r\n\r\n        const placeholder: string | undefined = getFieldDataOptionValue(fieldDataOptions, 'placeholder', '');\r\n        return {\r\n          placeholder,\r\n          readonly\r\n        };\r\n      }\r\n    },\r\n    number: {\r\n      component: InputComponent,\r\n      needToShowLabelOutside: true,\r\n      props: {\r\n        type: 'number'\r\n      },\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        const readonly: boolean = getFieldDataOptionValue(fieldDataOptions, 'readonly', false);\r\n\r\n        const placeholder: string | undefined = getFieldDataOptionValue(fieldDataOptions, 'placeholder', '');\r\n        return {\r\n          placeholder,\r\n          readonly\r\n        };\r\n      }\r\n    },\r\n    textarea: {\r\n      component: TextareaComponent,\r\n      needToShowLabelOutside: true,\r\n      props: {},\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        const readonly: boolean = getFieldDataOptionValue(fieldDataOptions, 'readonly', false);\r\n\r\n        const placeholder: string | undefined = getFieldDataOptionValue(fieldDataOptions, 'placeholder', '');\r\n        return {\r\n          placeholder,\r\n          readonly\r\n        };\r\n      }\r\n    },\r\n    select: {\r\n      component: SelectComponent,\r\n      needToShowLabelOutside: true,\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        let selectOptions = [];\r\n\r\n        const selectOptionsStr: string = getFieldDataOptionValue(fieldDataOptions, 'options');\r\n        if (selectOptionsStr) {\r\n          selectOptions = JSON.parse(selectOptionsStr).map(item => ({\r\n            id: item.name,\r\n            value: item.label\r\n          }));\r\n        }\r\n\r\n        return {\r\n          options: selectOptions\r\n        };\r\n      }\r\n    },\r\n    email: {\r\n      component: InputComponent,\r\n      needToShowLabelOutside: true,\r\n      props: {\r\n        type: 'email'\r\n      },\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        const placeholder: string | undefined = getFieldDataOptionValue(fieldDataOptions, 'placeholder', '');\r\n        return {\r\n          placeholder\r\n        };\r\n      }\r\n    },\r\n    fieldset: {\r\n      component: FieldsetComponent,\r\n      needToShowLabelOutside: true,\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        return {\r\n          items: fieldData.items\r\n        };\r\n      }\r\n    },\r\n    multiFieldset: {\r\n      component: MultiFieldsetComponent,\r\n      needToShowLabelOutside: true,\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        return {\r\n          items: fieldData.items\r\n        };\r\n      }\r\n    },\r\n    html: {\r\n      component: HtmlComponent,\r\n      needToShowLabelOutside: true,\r\n      mapConnectDataToProps: (fieldData: DynamicFieldData) => {\r\n        const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n        return {\r\n          // label: connectData.label,\r\n          cssClass: getFieldDataOptionValue(fieldDataOptions, 'inputCssClass', '')\r\n        };\r\n      }\r\n    },\r\n  },\r\n  validators: {\r\n    required: {\r\n      isGroupValidator: false,\r\n      validator: () => {\r\n        return Validators.required;\r\n      }\r\n    },\r\n    email: {\r\n      isGroupValidator: false,\r\n      validator: () => {\r\n        return Validators.email;\r\n      }\r\n    },\r\n    passwordMatch: {\r\n      isGroupValidator: true,\r\n      validator: (fieldData: DynamicFieldData) => {\r\n        const a = 'password';\r\n        const b = fieldData.name;\r\n\r\n        return validateEqual(a, b);\r\n      }\r\n    }\r\n  },\r\n  errorMessages: {\r\n    required: 'This field is required',\r\n    email: 'Wrong email format',\r\n    mismatch: 'Field values mismatch',\r\n    minlength: 'Field length is too short must be {requiredLength}, actual is {actualLength}',\r\n    maxlength: 'Field length is too long must be {requiredLength}, actual is {actualLength}',\r\n    age: 'The age under {requiredAge} is not accepted',\r\n    min: 'The minimum value for an input field is {min}',\r\n    max: 'The maximum value for an input field is {max}',\r\n  }\r\n}"
                }
            ],
            "stories/1-NgxForm-dynamic-form.stories.ts": [
                {
                    "name": "DynamicForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: DynamicFormComponent,\r\n  props: {\r\n    formData: dynamicFormData,\r\n    initialValues: {\r\n      html: text('html', 'some HTML text'),\r\n      text: 'some text',\r\n      select: 'twitter-follow-button'\r\n    },\r\n    submit: handleSubmit,\r\n    groupChange: handleChange\r\n  },\r\n})"
                },
                {
                    "name": "fieldset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: FieldsetComponent,\r\n  props: {\r\n    label: 'Fieldset',\r\n    items: [\r\n      {\r\n        label: 'Webix Text',\r\n        name: 'webixText',\r\n        type: 'webixText',\r\n        options: [],\r\n        items: [],\r\n      },\r\n      {\r\n        label: 'Webix Checkbox',\r\n        name: 'webixCheckbox',\r\n        type: 'webixCheckbox',\r\n        options: [],\r\n        items: [],\r\n      },\r\n    ]\r\n  },\r\n})"
                },
                {
                    "name": "handleChange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "(data: any) => {\r\n  action('form-change');\r\n}"
                },
                {
                    "name": "handleSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "(data: FormSubmitData) => {\r\n  action('button-click');\r\n  window.setTimeout(() => {\r\n    data.setSubmitting(false);\r\n  }, 3000);\r\n}"
                },
                {
                    "name": "html",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  template: `<ii-html [(ngModel)]=\"model\" [label]=\"'Custom HTML'\"></ii-html>`,\r\n  props: {\r\n    label: 'Webix Text',\r\n    model: text('model',  '<span>Any custom HTML</span>'),\r\n  },\r\n})"
                },
                {
                    "name": "InputEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: InputComponent,\r\n  props: {\r\n    type: 'email',\r\n    placeholder: text('placeholder', 'Enter Email'),\r\n  },\r\n})"
                },
                {
                    "name": "InputPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: InputComponent,\r\n  props: {\r\n    type: 'password',\r\n    placeholder: text('placeholder', 'Enter Password'),\r\n  },\r\n})"
                },
                {
                    "name": "InputText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: InputComponent,\r\n  props: {\r\n    placeholder: text('placeholder', 'Enter Text'),\r\n  },\r\n})"
                },
                {
                    "name": "multiFieldset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: MultiFieldsetComponent,\r\n  props: {\r\n    label: 'Multi Fieldset',\r\n    items: [\r\n      {\r\n        label: 'Text',\r\n        name: 'text1',\r\n        type: 'text',\r\n        options: [],\r\n        items: [],\r\n      },\r\n      {\r\n        label: 'Text2',\r\n        name: 'text2',\r\n        type: 'text',\r\n        options: [],\r\n        items: [],\r\n      },\r\n    ]\r\n  },\r\n})"
                },
                {
                    "name": "Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-NgxForm-dynamic-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: SelectComponent,\r\n  props: {\r\n    options: [{\r\n      id: '1',\r\n      value: 'Option 1'\r\n    }, {\r\n      id: '2',\r\n      value: 'Option 2'\r\n    }, {\r\n      id: '3',\r\n      value: 'Option 3'\r\n    }, {\r\n      id: '4',\r\n      value: 'Option 4'\r\n    }, {\r\n      id: '5',\r\n      value: 'Option 5'\r\n    }, {\r\n      id: '6',\r\n      value: 'Option 6'\r\n    }]\r\n  },\r\n})"
                }
            ],
            "data-sample/dynamic-form.ts": [
                {
                    "name": "dynamicFormData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "data-sample/dynamic-form.ts",
                    "type": "DynamicFormData",
                    "defaultValue": "{\r\n  items: [\r\n    {\r\n      label: 'Custom HTML',\r\n      name: 'html',\r\n      type: 'html',\r\n      options: [\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Text <span class=\"required-sign\">(*)</span>',\r\n      name: 'text',\r\n      type: 'text',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'text placeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Textarea <span class=\"required-sign\">(*)</span>',\r\n      name: 'textarea',\r\n      type: 'textarea',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'text plaeeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Email <span class=\"required-sign\">(*)</span>',\r\n      name: 'email',\r\n      type: 'email',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'email placeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}, {\"name\":\"email\",\"options\":[]}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Password <span class=\"required-sign\">(*)</span>',\r\n      name: 'password',\r\n      type: 'password',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'password placeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Confirm Password <span class=\"required-sign\">(*)</span>',\r\n      name: 'confirmPassword',\r\n      type: 'password',\r\n      options: [\r\n        {\r\n          name: 'placeholder',\r\n          value: 'confirm password placeholder',\r\n        },\r\n        {\r\n          name: 'validators',\r\n          value: '[{\"name\":\"required\",\"options\":[]}, {\"name\": \"passwordMatch\", \"options\": []}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Select',\r\n      name: 'select',\r\n      type: 'select',\r\n      options: [\r\n        {\r\n          name: 'default',\r\n          value: 'twitter-share-button',\r\n        },\r\n        {\r\n          name: 'options',\r\n          value:\r\n            '[{\"name\":\"twitter-share-button\",\"label\":\"Share\",\"position\":\"0\"},{\"name\":\"twitter-follow-button\",\"label\":\"Follow\",\"position\":\"1\"},{\"name\":\"twitter-hashtag-button\",\"label\":\"Hashtag\",\"position\":\"2\"},{\"name\":\"twitter-mention-button\",\"label\":\"Mention\",\"position\":\"3\"},{\"name\":\"twitter-tweet\",\"label\":\"Tweet\",\"position\":\"4\"},{\"name\":\"twitter-tweet\",\"label\":\"Tweet\",\"position\":\"4\"},{\"name\":\"twitter-timeline\",\"label\":\"Timeline\",\"position\":\"5\"}]',\r\n        },\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Webix text',\r\n      name: 'webixText',\r\n      type: 'webixText',\r\n      options: [\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-4 col-md-6 col-xs-12\"}]'\r\n        }\r\n      ],\r\n      items: [],\r\n    },\r\n    {\r\n      label: 'Fieldset',\r\n      name: 'fieldset',\r\n      type: 'fieldset',\r\n      options: [\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-12\"}]'\r\n        },\r\n        {\r\n          name: 'formGroupCssClass',\r\n          value: 'fieldset-wrapper'\r\n        }\r\n      ],\r\n      items: [\r\n        {\r\n          label: 'Webix Text',\r\n          name: 'webixText2',\r\n          type: 'text',\r\n          options: [\r\n            {\r\n              name: 'placeholder',\r\n              value: 'Webix Text',\r\n            }\r\n          ],\r\n          items: [],\r\n        },\r\n        {\r\n          label: 'Webix Text',\r\n          name: 'webixText3',\r\n          type: 'text',\r\n          options: [\r\n            {\r\n              name: 'placeholder',\r\n              value: 'Webix Text 2',\r\n            }\r\n          ],\r\n          items: [],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      label: 'Multi Fieldset',\r\n      name: 'multiFieldset',\r\n      type: 'multiFieldset',\r\n      options: [\r\n        {\r\n          name: 'htmlOptions',\r\n          value: '[{\"name\":\"cssClass\",\"value\":\"col-lg-12\"}]'\r\n        },\r\n        {\r\n          name: 'formGroupCssClass',\r\n          value: 'fieldset-wrapper'\r\n        }\r\n      ],\r\n      items: [\r\n        {\r\n          label: 'Webix Text',\r\n          name: 'webixText3',\r\n          type: 'text',\r\n          options: [\r\n            {\r\n              name: 'placeholder',\r\n              value: 'Webix Text',\r\n            }\r\n          ],\r\n          items: [],\r\n        },\r\n        {\r\n          label: 'Webix Checkbox',\r\n          name: 'text2',\r\n          type: 'text',\r\n          options: [],\r\n          items: [],\r\n        },\r\n      ],\r\n    },\r\n  ]\r\n\r\n}"
                }
            ],
            "stories/0-NgxForm-validation.stories.ts": [
                {
                    "name": "formSample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/0-NgxForm-validation.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  template: `\r\n  <form [formGroup]=\"group\" novalidate (submit)=\"handleSubmit(group)\">\r\n    <ii-form-validation-errors [group]=\"group\"></ii-form-validation-errors>\r\n    <ii-validation-control [control]=\"group.controls.email\">\r\n      <input type=\"email\" formControlName=\"email\" placeholder=\"email\">\r\n    </ii-validation-control>\r\n    <ii-validation-control [control]=\"group.controls.password\">\r\n        <input type=\"password\" formControlName=\"password\" placeholder=\"password\">\r\n    </ii-validation-control>\r\n    <button [disabled]=\"!group.valid\">Submit</button>\r\n</form>\r\n`,\r\n  props: {\r\n    group: new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8)])\r\n    }),\r\n    handleSubmit\r\n  },\r\n})"
                },
                {
                    "name": "handleSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/0-NgxForm-validation.stories.ts",
                    "type": "",
                    "defaultValue": "(group: FormGroup) => {\r\n  action('submit-click');\r\n  window.setTimeout(() => {\r\n    setFormErrors(group, [{\r\n      message: 'Some form error'\r\n    }]);\r\n  }, 3000);\r\n}"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts": [
                {
                    "name": "getFieldDataOptionValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                    "type": "",
                    "defaultValue": "(options: DynamicFieldDataOption[], name: string, defaultValue: any = undefined) => {\r\n  const option: DynamicFieldDataOption | undefined = options.find(item => item.name === name);\r\n  if (option) {\r\n    return option.value;\r\n  }\r\n\r\n  return defaultValue;\r\n}"
                },
                {
                    "name": "getGroupValidators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                    "type": "",
                    "defaultValue": "(fieldData: DynamicFieldData, config: NgxFormModuleConfig): ValidatorFn[] => {\r\n  const validators: ValidatorFn[] = [];\r\n  fieldData.options.forEach(option => {\r\n    if (option.name === 'validators') {\r\n      const dynamicFormValidators: any[] = JSON.parse(option.value);\r\n\r\n      dynamicFormValidators.forEach(dynamicFormValidator => {\r\n        const validatorName = dynamicFormValidator.name;\r\n        const validatorArgs = dynamicFormValidator.options;\r\n\r\n        if (config.validators[validatorName] && config.validators[validatorName].isGroupValidator) {\r\n          validators.push(config.validators[validatorName].validator.call(null, fieldData, ...validatorArgs));\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return validators;\r\n}"
                },
                {
                    "name": "getValidators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                    "type": "",
                    "defaultValue": "(fieldData: DynamicFieldData, config: NgxFormModuleConfig): ValidatorFn[] => {\r\n  const validators: ValidatorFn[] = [];\r\n  fieldData.options.forEach(option => {\r\n    if (option.name === 'validators') {\r\n      const dynamicFormValidators: any[] = JSON.parse(option.value);\r\n\r\n      dynamicFormValidators.forEach(dynamicFormValidator => {\r\n        const validatorName = dynamicFormValidator.name;\r\n        const validatorArgs = dynamicFormValidator.options;\r\n\r\n        if (config.validators[validatorName] && !config.validators[validatorName].isGroupValidator) {\r\n          validators.push(config.validators[validatorName].validator.call(null, fieldData, ...validatorArgs));\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return validators;\r\n}"
                },
                {
                    "name": "needToShowLabelOutside",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                    "type": "",
                    "defaultValue": "(fieldData: DynamicFieldData, config: NgxFormModuleConfig): boolean => {\r\n  const fieldDataOptions: DynamicFieldDataOption[] = fieldData.options;\r\n\r\n  let result = getFieldDataOptionValue(fieldDataOptions, 'needToShowLabelOutside');\r\n\r\n  if (result !== undefined) {\r\n    return result;\r\n  }\r\n\r\n  const itemConfig = config.fields[fieldData.type];\r\n  if (!itemConfig) {\r\n    const supportedTypes: string = Object.keys(config.fields).join(', ');\r\n    throw Error(\r\n      `Trying to use an unsupported type (${fieldData.type}).\r\n        Supported types: ${supportedTypes}`\r\n    );\r\n  }\r\n\r\n  result = itemConfig.needToShowLabelOutside || false;\r\n\r\n  return result;\r\n}"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts": [
                {
                    "name": "markAllFormControlsAsTouched",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                    "type": "",
                    "defaultValue": "(formGroup: FormGroup): void => {\r\n  Object.keys(formGroup.controls).forEach(field => {\r\n    const control = formGroup.get(field);\r\n    if (control instanceof FormControl) {\r\n      control.markAsTouched({ onlySelf: true });\r\n    } else if (control instanceof FormGroup) {\r\n      markAllFormControlsAsTouched(control);\r\n    }\r\n  });\r\n}"
                },
                {
                    "name": "prepareValidationMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                    "type": "",
                    "defaultValue": "(value: string): string => {\r\n  return value;\r\n}"
                },
                {
                    "name": "setFormErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                    "type": "",
                    "defaultValue": "(\r\n  formGroup: FormGroup,\r\n  formErrors: FormError[]\r\n): void => {\r\n  const formGroupErrors: string[] = [];\r\n  const formControlErrors: Record<string, string[]> = {};\r\n\r\n  formErrors.forEach(item => {\r\n    const formControlName = item.formControlName;\r\n\r\n    if (!formControlName) {\r\n      return formGroupErrors.push(item.message);\r\n    }\r\n\r\n    const formControl = formGroup.get(formControlName);\r\n\r\n    if (formControl) {\r\n      if (!formControlErrors[formControlName]) {\r\n        formControlErrors[formControlName] = [];\r\n      }\r\n      formControlErrors[formControlName].push(item.message);\r\n    } else {\r\n      formGroupErrors.push(item.message);\r\n    }\r\n  });\r\n\r\n  if (formGroupErrors.length) {\r\n    formGroup.setErrors({\r\n      customArr: formGroupErrors\r\n    });\r\n  }\r\n\r\n  for (const formControlName in formControlErrors) {\r\n    const formControl = formGroup.get(formControlName);\r\n\r\n    formControl.setErrors({\r\n      customArr: formControlErrors[formControlName]\r\n    });\r\n  }\r\n\r\n  markAllFormControlsAsTouched(formGroup);\r\n}"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/constants/ngx-form-module-config.ts": [
                {
                    "name": "NGX_FORM_MODULE_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/constants/ngx-form-module-config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgxFormModuleConfig>('NGX_FORM_MODULE_CONFIG')"
                }
            ],
            "stories/2-NgxCommon.stories.ts": [
                {
                    "name": "safePipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/2-NgxCommon.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  template: `\r\n  <h4>An untrusted URL:</h4>\r\n<p><a class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\">Click me</a></p>\r\n<h4>A trusted URL:</h4>\r\n<p><a class=\"e2e-trusted-url\" [href]=\"dangerousUrl | safe:'url'\">Click me</a></p>\r\n`,\r\n  props: {\r\n    dangerousUrl: 'javascript:alert(\"Hi there\")'\r\n  },\r\n})"
                }
            ],
            "projects/ildar-icoosoft/ngx-form/src/lib/validators/index.ts": [
                {
                    "name": "validateEqual",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ildar-icoosoft/ngx-form/src/lib/validators/index.ts",
                    "type": "",
                    "defaultValue": "(\r\n  a: FormControl | string,\r\n  b: FormControl | string\r\n) => {\r\n  return (group: FormGroup): { [s: string]: boolean } => {\r\n    const controlA = a instanceof FormControl ? a : group.root.get(a);\r\n    const controlB = b instanceof FormControl ? b : group.root.get(b);\r\n\r\n    const controlBErrors = controlB.errors;\r\n\r\n    if (controlA && controlB && controlA.value !== controlB.value) {\r\n      controlB.setErrors(\r\n        Object.assign({}, controlBErrors, {\r\n          mismatch: true\r\n        })\r\n      );\r\n    } else {\r\n      if (controlB.hasError('mismatch')) {\r\n        const newErrors = _omit(controlBErrors, 'mismatch');\r\n        controlB.setErrors(_isEmpty(newErrors) ? null : newErrors);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "data-sample/dynamic-form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dynamicFormData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-common/src/lib/pipes/safe.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/dynamic-form/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/fieldset/fieldset.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldsetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/form-validation-errors/form-validation-errors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormValidationErrorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/html/html.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HtmlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/multi-fieldset/multi-fieldset.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiFieldsetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/components/validation-control/validation-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ValidationControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/configs/ngx-form-mdule.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNgxFormModuleConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/constants/ngx-form-module-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NGX_FORM_MODULE_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/directives/dynamic-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicFieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/control-change-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ControlChangeData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-field-data-option.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFieldDataOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-field-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFieldData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-form-button-click-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormButtonClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-form-button.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormButton",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/dynamic-form-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/form-error.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/form-submit-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormSubmitData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/ngx-form-module-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgxFormModuleConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/ngx-form-module-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgxFormValidatorConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/interfaces/select-option.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/pipes/validation-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ValidationMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFieldDataOptionValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGroupValidators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getValidators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/dynamic-form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "needToShowLabelOutside",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "markAllFormControlsAsTouched",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prepareValidationMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/utils/error.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setFormErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/lib/validators/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateEqual",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ildar-icoosoft/ngx-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/0-NgxForm-validation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formSample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/0-NgxForm-validation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handleSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DynamicForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fieldset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handleChange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handleSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "html",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multiFieldset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-NgxForm-dynamic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/2-NgxCommon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "safePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}